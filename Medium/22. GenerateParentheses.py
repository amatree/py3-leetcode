class Solution:
    def insertTo(self, toStr, index):
        return toStr[:index] + "()" + toStr[index:]

    def generateParenthesis(self, n: int) -> list[str]:
        result = ["()"*n]
        if n == 1:
            return result
        
        open = 0
        closed = 0
        
        while open + closed < n:
                tmp = ""
                if open == closed:
                        tmp += "("
                        open += 1
                if 

        return result
# n=2:
# me: ["(())","()()"]

# n=3:
# me: ["((()))","(()())","(())()","()(())","()()()"]

# n=4:
# me: ["(((())))","(((())))","((()()))","((())())","(()(()))","(()()())","(()(()))"]
# lc: ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"]

# n=5:
# lc: ["((((()))))","(((()())))","(((())()))","(((()))())","(((())))()","((()(())))","((()()()))","((()())())","((()()))()","((())(()))","((())()())","((())())()",
#       "((()))(())","((()))()()","(()((())))","(()(()()))","(()(())())","(()(()))()","(()()(()))","(()()()())","(()()())()","(()())(())","(()())()()","(())((()))",
#       "(())(()())","(())(())()","(())()(())","(())()()()","()(((())))","()((()()))","()((())())","()((()))()","()(()(()))","()(()()())","()(()())()","()(())(())",
#       "()(())()()","()()((()))","()()(()())","()()(())()","()()()(())","()()()()()"]


sols = [["()"],
        ["(())", "()()"],
        ["((()))", "(()())", "(())()", "()(())", "()()()"],
        ["(((())))", "((()()))", "((())())", "((()))()", "(()(()))", "(()()())", "(()())()",
         "(())(())", "(())()()", "()((()))", "()(()())", "()(())()", "()()(())", "()()()()"],
        ["((((()))))", "(((()())))", "(((())()))", "(((()))())", "(((())))()", "((()(())))", "((()()()))", "((()())())", "((()()))()", "((())(()))", "((())()())", "((())())()", "((()))(())", "((()))()()", "(()((())))", "(()(()()))", "(()(())())", "(()(()))()", "(()()(()))", "(()()()())", "(()()())()",
         "(()())(())", "(()())()()", "(())((()))", "(())(()())", "(())(())()", "(())()(())", "(())()()()", "()(((())))", "()((()()))", "()((())())", "()((()))()", "()(()(()))", "()(()()())", "()(()())()", "()(())(())", "()(())()()", "()()((()))", "()()(()())", "()()(())()", "()()()(())", "()()()()()"],
        ]

s = Solution()
num = 4
p = s.generateParenthesis(num)

print(p)
print("is my solution correct?", "YES LESGOO!" if p == sols[num] else "NOPE")
