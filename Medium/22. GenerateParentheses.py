class Solution:
    def generateParenthesis(self, n: int) -> list[str]:
        result = ["()"*n]
        if n == 1: return result
        
        return result

# n=3:
# me: ["((()))","(()())","(())()","()(())","()()()"]

# n=4:
# me: ["(((())))","(((())))","((()()))","((())())","(()(()))","(()()())","(()(()))"]
# lc: ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"]

# n=5:
# lc: ["((((()))))","(((()())))","(((())()))","(((()))())","(((())))()","((()(())))","((()()()))","((()())())","((()()))()","((())(()))","((())()())","((())())()",
#       "((()))(())","((()))()()","(()((())))","(()(()()))","(()(())())","(()(()))()","(()()(()))","(()()()())","(()()())()","(()())(())","(()())()()","(())((()))",
#       "(())(()())","(())(())()","(())()(())","(())()()()","()(((())))","()((()()))","()((())())","()((()))()","()(()(()))","()(()()())","()(()())()","()(())(())",
#       "()(())()()","()()((()))","()()(()())","()()(())()","()()()(())","()()()()()"]

sols = [["()"],
        ["(())","()()"],
        ["((()))","(()())","(())()","()(())","()()()"],
        ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"],

        ]

s = Solution()
num = 4
p = s.generateParenthesis(num)

print(p == sols[num])
print(p)